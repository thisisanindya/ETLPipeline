'''
ETL Pipeline Preparation
------------------------
Follow the instructions below to help you create your ETL pipeline.

1. Import libraries and load datasets.
    Import Python libraries
    Load messages.csv into a dataframe and inspect the first few lines.
    Load categories.csv into a dataframe and inspect the first few lines.
'''


# import libraries
import pandas as pd

# load messages dataset
messages = pd.read_csv('messages.csv')
print("messages.head() ===> \n", messages.head())
print(messages.shape)
print(messages.columns)
# load categories dataset
categories = pd.read_csv('categories.csv')
print("categories.head() ===> \n", categories.head())
print(categories.shape)
print(categories.columns)
'''
2. Merge datasets.
------------------
Merge the messages and categories datasets using the common id
Assign this combined dataset to df, which will be cleaned in the following 
steps
'''

# merge datasets
df = pd.merge(messages, categories, on = "id") 
print("df.head() ===> \n", df.head())
print(df.shape)
print(df.columns)

'''
3. Split categories into separate category columns.
---------------------------------------------------
Split the values in the categories column on the ; character so that each value 
becomes a separate column. You'll find this method very helpful! Make sure to 
set expand=True. 

Use the first row of categories dataframe to create column names for the 
categories data.
Rename columns of categories with new column names.
'''

# create a dataframe of the 36 individual category columns

categories = df["categories"][1:].str.split(";", 36, expand=True)
print("", categories.head())

# select the first row of the categories dataframe
first_row = categories.iloc[1]

# use this row to extract a list of new column names for categories.
# one way is to apply a lambda function that takes everything 
# up to the second to last character of each string with slicing
new_colnames = first_row.apply(lambda x: x.split('-')[0])

print()
print(new_colnames)

# rename the columns of `categories`
categories.columns = new_colnames
print("Final categories ===> \n", categories.head())


'''
4. Convert category values to just numbers 0 or 1.
Iterate through the category columns in df to keep only the last character of 
each string (the 1 or 0). For example, related-0 becomes 0, related-1 becomes 

1. Convert the string to a numeric value.
You can perform normal string actions on Pandas Series, like indexing, by 
including .str after the Series. You may need to first convert the Series 
to be of type string, which you can do with astype(str).
'''

for column in categories:
    # set each value to be the last character of the string
    categories[column] = categories[column].apply(lambda x: int(x.split('-')[1]))

print("Categories ===> \n", categories.head())


'''
5. Replace categories column in df with new category columns.
Drop the categories column from the df dataframe since it is no longer needed.
Concatenate df and categories data frames.
'''

df.drop('categories', axis = 1, inplace = True)
print("df.head() ===> \n", df.head())

# concatenate the original dataframe with the new `categories` dataframe
df = df.join(categories)
print("df.head() ===> ", df.head())


'''
6. Remove duplicates.
Check how many duplicates are in this dataset.
Drop the duplicates.
Confirm duplicates were removed.
'''

# check number of duplicates
print()
print("df.duplicated() ===> \n", df.duplicated())

print()
print("Sum of df.duplicated() ===> \n", sum(df.duplicated()))

# drop duplicates
df = df.drop_duplicates()

# check number of duplicates
print()
print("After drop - df.duplicated() ===> \n", df.duplicated())

print()
print("After drop - Sum of df.duplicated() ===> \n", sum(df.duplicated()))


'''
7. Save the clean dataset into an sqlite database.
You can do this with pandas to_sql method combined with the SQLAlchemy library. 
Remember to import SQLAlchemy's create_engine in the first cell of this 
notebook to use it below.
'''
from sqlalchemy import create_engine
engine = create_engine('sqlite:///InsertDatabaseName.db')
df.to_sql('InsertTableName', engine, index=False)
